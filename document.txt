CategoryViewSet Documentation
Overview
The CategoryViewSet class is part of a Django REST framework (DRF) application. This viewset handles CRUD (Create, Read, Update, Delete) operations for the Category model and includes a custom action to list products based on category and subcategory filters.

Components
Imports and Dependencies
Class Definition
QuerySet and Serializer
Retrieve Method
Custom Action (products)
URL Configuration
1. Imports and Dependencies
The necessary modules and classes are imported from Django and DRF to facilitate the creation of viewsets, handling HTTP requests, and interacting with the database.

python
Copy code
from rest_framework import viewsets
from rest_framework.decorators import action
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from .models import Product, Category, SubCategory
from .serializers import ProductSerializer, CategorySerializer, SubCategorySerializer
viewsets: Provides a base class for all viewsets.
action: A decorator to define custom actions in viewsets.
Response: Used to create HTTP responses.
get_object_or_404: A helper function to get an object or return a 404 error if not found.
Models and Serializers: Importing the relevant models (Product, Category, SubCategory) and serializers (ProductSerializer, CategorySerializer, SubCategorySerializer).
2. Class Definition
The CategoryViewSet inherits from viewsets.ModelViewSet to provide the basic CRUD operations for the Category model.

python
Copy code
class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.prefetch_related('subcategories', 'subcategories__products').all()
    serializer_class = CategorySerializer
queryset: This attribute defines the base queryset used for retrieving Category objects. The prefetch_related method is used to optimize database queries by prefetching related subcategories and their products.
serializer_class: Specifies the serializer class to be used for serializing Category objects.
3. Retrieve Method
The retrieve method handles GET requests for individual Category instances.

python
Copy code
def retrieve(self, request, *args, **kwargs):
    instance = self.get_object()
    serializer = CategorySerializer(instance, context={'request': request})
    return Response(serializer.data)
instance: The specific Category object retrieved from the database.
serializer: An instance of CategorySerializer to convert the Category object into JSON format.
Response: The serialized data is returned in the HTTP response.
4. Custom Action (products)
The products action is a custom method to list products based on category and subcategory filters.

python
Copy code
@action(detail=False, methods=['get'])
def products(self, request):
    category_id = request.query_params.get('category')
    subcategory_id = request.query_params.get('subcategories')

    category = get_object_or_404(Category, id=category_id)
    subcategories = category.subcategories.all()

    products = Product.objects.filter(category__category=category)

    if subcategory_id:
        subcategory = get_object_or_404(SubCategory, id=subcategory_id)
        products = products.filter(category=subcategory)

    category_serializer = CategorySerializer(category, context={'request': request})
    subcategory_serializer = SubCategorySerializer(subcategories, many=True, context={'request': request})
    product_serializer = ProductSerializer(products, many=True)

    return Response({
        'products': product_serializer.data
    })
Steps:
Retrieve Query Parameters:

category_id: The ID of the category from the query parameters.
subcategory_id: The ID of the subcategory from the query parameters.
Get Category and Subcategories:

category: Retrieves the Category object or returns a 404 error if not found.
subcategories: Fetches all subcategories related to the retrieved category.
Filter Products:

Initial Filter: Filters products that belong to the specified category's subcategories.
Subcategory Filter: Further filters products if a subcategory ID is provided.
Serialize Data:

category_serializer: Serializes the Category object.
subcategory_serializer: Serializes the list of subcategories.
product_serializer: Serializes the filtered list of products.
Response:

Returns the serialized product data in the response.
5. URL Configuration
To connect the viewset to the appropriate URL, you need to configure the URLs in your urls.py file.

python
Copy code
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import CategoryViewSet

router = DefaultRouter()
router.register(r'categories', CategoryViewSet, basename='category')

urlpatterns = [
    path('', include(router.urls)),
    path('category-products/', CategoryViewSet.as_view({'get': 'products'})),
]